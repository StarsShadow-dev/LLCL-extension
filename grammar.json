{
	"name": "parallel",
	"scopeName": "source.parallel",

	"patterns": [
		{
			"include": "#expression"
		}
	],
	"repository": {
		"expression": {
			"patterns": [
				{
					"include": "#keyword"
				},
				{
					"include": "#control_keyword"
				},
				{
					"include": "#number"
				},

				{
					"include": "#name"
				},

				{
					"include": "#type"
				},

				{
					"include": "#line_comment"
				},
				{
					"include": "#block_comment"
				},
				{
					"include": "#double_quote_string"
				},

				{
					"include": "#operator"
				},

				{
					"include": "#semicolon"
				}
			]
		},
		
		"keyword": {
			"name": "keyword.constant.parallel",
			"match": "(true|false)"
		},
		"control_keyword": {
			"match": "\\s*(function|return|var|import|if|while|struct|new|public)[ \t\n;]",
			"captures": {
				"1": {
					"name": "keyword.control.parallel"
				}
			}
		},

		"name": {
			"name": "entity.name.parallel",
			"match": "[a-zA-Z_][a-zA-Z0-9\\_]*"
		},

		"number": {
			"name": "constant.numeric.parallel",
			"match": "[0-9]+"
		},

		"type": {
			"match": "[\\:\\!]\\s*([a-zA-Z_][a-zA-Z0-9\\_]*)",
			"captures": {
				"1": {
					"name": "storage.type.parallel"
				}
			}
		},

		"line_comment": {
			"name": "comment.line.parallel",

			"begin": "//",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.comment.parallel"
				}
			},
			"end": "\n",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.comment.parallel"
				}
			}
		},
		"block_comment": {
			"name": "comment.block.parallel",

			"begin": "\/[*]",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.comment.parallel"
				}
			},
			"end": "[*](\/)",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.comment.parallel"
				}
			}
		},

		"double_quote_string": {
			"name": "string.quoted.double.parallel",

			"begin": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.parallel"
				}
			},
			"end": "\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.parallel"
				}
			}
		},

		"operator": {
			"name": "keyword.operator.arithmetic.parallel",
			"match": "(\\+|\\-|\\*|\\/)"
		},

		"semicolon": {
			"name": "punctuation.terminator.statement.parallel",
			"match": "\\s*\\;"
		}
	}
}