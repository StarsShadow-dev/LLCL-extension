{
	"name": "ucl",
	"scopeName": "source.ucl",

	"patterns": [
		{
			"include": "#line_comment"
		},
		{
			"include": "#block_comment"
		},
		{
			"include": "#expression"
		}
	],
	"repository": {
		"expression": {
			"patterns": [
				{
					"include": "#boolean"
				},
				
				{
					"include": "#control_keyword"
				},
				{
					"include": "#number"
				},

				{
					"include": "#name"
				},

				{
					"include": "#type"
				},
				{
					"include": "#as"
				},

				{
					"include": "#double_quote_string"
				},

				{
					"include": "#operator"
				},

				{
					"include": "#semicolon"
				}
			]
		},
		
		"boolean": {
			"name": "constant.language.boolean.ucl",
			"match": "(true|false)"
		},
		
		"control_keyword": {
			"match": "(pub|inline|comptime|unsafe|fn|ret|var|const|struct|if|else|while)[ \t\n;\\(]",
			"captures": {
				"1": {
					"name": "keyword.control.ucl"
				}
			}
		},

		"name": {
			"name": "entity.name.ucl",
			"match": "[a-zA-Z_][a-zA-Z0-9\\_]*"
		},

		"number": {
			"name": "constant.numeric.ucl",
			"match": "[0-9]+"
		},

		"type": {
			"match": "\\:\\s*('\\s*)?([a-zA-Z_][a-zA-Z0-9_]*)",
			"captures": {
				"1": {
					"name": "keyword.operator.ucl"
				},
				"2": {
					"name": "storage.type.ucl"
				}
			}
		},
		
		"as": {
			"match": "\\s+(as)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
			"captures": {
				"1": {
					"name": "keyword.control.ucl"
				},
				"2": {
					"name": "storage.type.ucl"
				}
			}	
		},

		"line_comment": {
			"name": "comment.line.ucl",

			"begin": "//",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.comment.ucl"
				}
			},
			"end": "\n",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.comment.ucl"
				}
			}
		},
		"block_comment": {
			"name": "comment.block.ucl",

			"begin": "\/[*]",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.comment.ucl"
				}
			},
			"end": "[*](\/)",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.comment.ucl"
				}
			}
		},

		"double_quote_string": {
			"begin": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.ucl"
				}
			},
			"end": "\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.ucl"
				}
			},
			"name": "string.quoted.double.ucl",
			"patterns": [
				{
					"match": "\\\\.",
					"name": "constant.character.escape.ucl"
				}
			]
		},

		"operator": {
			"name": "keyword.operator.arithmetic.ucl",
			"match": "(\\+|\\-|\\*|\\/)"
		},

		"semicolon": {
			"name": "punctuation.terminator.statement.ucl",
			"match": "\\;"
		}
	}
}